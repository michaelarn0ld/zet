#!/usr/bin/python3

# The purpose of this script is to map tags to the zettels that contain the tag;
# the mapping should include the following data: zettel id and zettel title

import sys
import os
import subprocess
import json

class ZettelJSON:
  def __init__(self, git_head):
    self.git_head = git_head
    self.tags = []
  
  def add_tag(self, tag):
    self.tags.append(tag)

  def repr_json(self):
    return dict(git_head=self.git_head, tags=self.tags)


class ZettelTag:
  def __init__(self, tag):
    self.tag = tag
    self.zettels = []

  def add_zettel(self, zettel):
    self.zettels.append(zettel)
  
  def repr_json(self):
    return dict(tag=self.tag, zettels=self.zettels)


class Zettel:
  def __init__(self, zettel_id, title):
    self.zettel_id = zettel_id
    self.title = title

  def repr_json(self):
    return dict(zettel_id=self.zettel_id, title=self.title)


class ComplexEncoder(json.JSONEncoder):
  def default(self, obj):
    if hasattr(obj, 'repr_json'): return obj.repr_json()
    return json.JSONEncoder.default(self, obj)


num_args = len(sys.argv)

if num_args != 2:
  print('This script takes exactly one argument!\n')
  print('Hint: please path the root directory path to the Zettelkasten...')
  exit()

def get_metadata(tag, zettelkasten):
  zettel_tag = ZettelTag(tag)
  zettel_files = [(zettel.name, f'{zettelkasten}/{zettel.name}/README.md') for zettel in os.scandir(zettelkasten) if zettel.name[0].isdigit()]
  for zettel in zettel_files:
    zettel_id, zettel_file = zettel
    tag_cmd = f'tac {zettel_file} | egrep -m 1 . | grep {tag}'
    try:
      tag_out = subprocess.run(tag_cmd, shell=True, stdout=subprocess.DEVNULL)
      if tag_out.returncode == 0:
        title_cmd = f'cat {zettel_file} | egrep -m 1 .'
        title_out = subprocess.run(title_cmd, shell=True, stdout=subprocess.PIPE) 
        title = f'STARTTITLE_{title_out.stdout.decode().strip()}_ENDTITLE'
        zettel_tag.add_zettel(Zettel(zettel_id, title))
    except:
      pass
  return zettel_tag

def git_head(zettelkasten):
  cmd = f'/usr/bin/git --git-dir={zettelkasten}/.git --work-tree={zettelkasten} log --oneline -n 1'
  out = subprocess.Popen([arg for arg in cmd.split()],
          stdout=subprocess.PIPE,
          stderr=subprocess.STDOUT)
  stdout, stderr = out.communicate()
  return str(stdout).split()[0].split('\'')[1]
  
def parse_line(line):
  return line.strip().split('#')[1]

def get_tags(zettelkasten):
  with open(f'{zettelkasten}/REGISTRY.md') as registry:
    return [parse_line(line) for line in registry.readlines() if parse_line(line)]

def main():
  zettelkasten = sys.argv[1]
  zettel_tags = get_tags(zettelkasten)
  zettel_json = ZettelJSON(git_head(zettelkasten))
  for tag in zettel_tags:
    zettel_json.add_tag(get_metadata(tag, zettelkasten))
  json_string = json.dumps(zettel_json.repr_json(), cls=ComplexEncoder)
  file_name = f'{zettelkasten}/MAPPINGS.json'
  with open(file_name, 'w') as f:
    f.write(json_string)

if __name__ == '__main__': main()
